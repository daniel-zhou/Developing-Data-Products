download.file(fileurl, tf)
# get the name of the first file in the zip archive
fname = unzip(tf, list=TRUE)
# unzip the file to the temporary directory
unzip(tf, files=fname, exdir=td, overwrite=TRUE)
# fpath is the full path to the extracted file
fpath = file.path(td, fname)
fpath
fname
filepath<- "C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\activity_labels.txt"
data<-read.table(filepath)
data
activity_labels<-read.table(filepath)
features<-<-read.table(filepath)
features<-read.table(filepath)
features
filepath<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\features.txt"
features<-read.table(filepath)
features
filepath3<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\train\\subject_train.txt"
subject_train<-read.table(filepath3)
head(subject_train)
subject_train<-read.table(subject_train_fp)
Trainingset<-read.table(Trainingset_fp)
Traininglabel<-read.table(Traininglabel_fp)
subject_train_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\train\\subject_train.txt"
Trainingset_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\train\\X_train.txt"
Traininglabel_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\train\\y_train.txt"
subject_train<-read.table(subject_train_fp)
Trainingset<-read.table(Trainingset_fp)
Traininglabel<-read.table(Traininglabel_fp)
Traininglabel<-read.table(Traininglabel_fp)
mydataset<-data.frame(subject_train,Traininglabel,Trainingset)
head(mydataset)
names(mydataset)
features
features[,2]
names(mydataset)<-("subject_train","Traininglabel",features[,2])
names(mydataset)<-c("subject_train","Traininglabel",features[,2])
head(mydataset)
features[,2]
head(mydataset)
features[1:591,2]
names(mydataset)<-c("subject_train","Traininglabel",features[1:561,2])
head(mydataset)
names(mydataset)<-c(features[1:561,2])
head(mydataset)
names(mydataset)<-c(features[1:561,2])
head(mydataset)
names(mydataset)<-(features[1:561,2])
head(mydataset)
names(mydataset)<-("subject_train","Traininglabel",features[1:561,2])
names(mydataset)<-(c("subject_train","Traininglabel"),features[1:561,2])
colname<-c("subject_train","Traininglabel",features[1:561,2])
colname
colname<-c("subject_train","Traininglabel",features[1:561,1])
colname
mydataset<-data.frame(Trainingset)
mydataset
head(mydataset)
names(mydataset)<-features[1:561,2]
head(mydataset)
mysubject<-data.frame(Trainingset)
myTraininglabel<-data.frame(Traininglabel)
mysubject<-data.frame(Trainingset)
myTraininglabel<-data.frame(Traininglabel)
myTrainingset<-data.frame(Trainingset)
names(mysubject)<-"subject_train"
names(myTraininglabel)<-"Traininglabel"
names(myTrainingset)<-features[1:561,2]
mydataset<-rbind(mysubject,myTraininglabel,myTrainingset)
mydataset<-cbind(mysubject,myTraininglabel,myTrainingset)
head(mydataset,2)
head(mysubject,2)
mysubject<-data.frame(subject_train)
myTraininglabel<-data.frame(Traininglabel)
myTrainingset<-data.frame(Trainingset)
names(mysubject)<-"subject_train"
names(myTraininglabel)<-"Traininglabel"
names(myTrainingset)<-features[1:561,2]
mydataset<-cbind(mysubject,myTraininglabel,myTrainingset)
head(mydataset,2)
subject_train_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\train\\subject_train.txt"
Trainingset_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\train\\X_train.txt"
Traininglabel_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\train\\y_train.txt"
subject_train<-read.table(subject_train_fp)
Trainingset<-read.table(Trainingset_fp)
Traininglabel<-read.table(Traininglabel_fp)
myTrainingsubject<-data.frame(subject_train)
myTraininglabel<-data.frame(Traininglabel)
myTrainingset<-data.frame(Trainingset)
names(mysubject)<-"subject_train"
names(myTraininglabel)<-"Traininglabel"
names(myTrainingset)<-features[1:561,2]
myTrainingdataset<-cbind(myTrainingsubject,myTraininglabel,myTrainingset)
head(myTrainingdataset,2)
##test data
subject_test_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\test\\subject_test.txt"
Testset_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\test\\X_test.txt"
Testlabel_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\test\\y_test.txt"
subject_test<-read.table(subject_test_fp)
Testset<-read.table(Testset_fp)
Testlabel<-read.table(Testlabel_fp)
myTestsubject<-data.frame(subject_test)
myTestlabel<-data.frame(Testlabel)
myTestset<-data.frame(Testset)
names(mysubject)<-"subject_test"
names(myTestlabel)<-"Testlabel"
names(myTestset)<-features[1:561,2]
myTestdataset<-cbind(myTestsubject,myTestlabel,myTestset)
head(myTestdataset,2)
mydataset<-rbind(myTrainingdataset,myTestdataset)
myTrainingsubject<-data.frame(subject_train)
myTraininglabel<-data.frame(Traininglabel)
myTrainingset<-data.frame(Trainingset)
names(myTrainingsubject)<-"subject"
names(myTraininglabel)<-"label"
names(myTrainingset)<-features[1:561,2]
myTrainingdataset<-cbind(myTrainingsubject,myTraininglabel,myTrainingset)
head(myTrainingdataset,2)
##test data
subject_test_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\test\\subject_test.txt"
Testset_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\test\\X_test.txt"
Testlabel_fp<-"C:\\Users\\I309666\\Downloads\\file1d2454581c9e\\UCI HAR Dataset\\test\\y_test.txt"
subject_test<-read.table(subject_test_fp)
Testset<-read.table(Testset_fp)
Testlabel<-read.table(Testlabel_fp)
myTestsubject<-data.frame(subject_test)
myTestlabel<-data.frame(Testlabel)
myTestset<-data.frame(Testset)
names(myTestsubject)<-"subject"
names(myTestlabel)<-"label"
names(myTestset)<-features[1:561,2]
myTestdataset<-cbind(myTestsubject,myTestlabel,myTestset)
head(myTestdataset,2)
##merge training and test dataset
mydataset<-rbind(myTrainingdataset,myTestdataset)
dim(mydataset)
short_dataset<-select(mydataset,"subject","label")
library(dplyr)
install.packages("dplyr")
library(dplyr)
short_dataset<-select(mydataset,"subject","label")
short_dataset<-select(mydataset,subject,label)
short_dataset
short_dataset<-select(mydataset,subject)
names(mydataset)
unique(names(mydataset))
name1<-names(mydataset))
name2<-unique(names(mydataset))
name1<-names(mydataset)
name2<-unique(names(mydataset))
grep("mean",features)
?grep
grep("[mean]",features)
grep("^f",features)
grep("^angle",features)
features
grep("^angle",features[1:561,2])
grep("mean",features[1:561,2])
grep("mean",features[1:561,2],value = TRUE)
grep("mean()"|"std()",features[1:561,2],value = TRUE)
grep(("mean()"|"std()"),features[1:561,2],value = TRUE)
grep("mean()|std()",features[1:561,2],value = TRUE)
length(grep("mean()|std()",features[1:561,2],value = TRUE))
length(grep("mean()|std()",features[1:561,2],value = TRUE))
length(grep("mean|std",features[1:561,2],value = TRUE))
length(grep("mean()|std()",features[1:561,2],value = TRUE))
length(grep("mean[()]|std[()]",features[1:561,2],value = TRUE))
length(grep("mean[(]|std[(]",features[1:561,2],value = TRUE))
length(grep("mean[(]|std[(]",features[1:561,2]))
grep("mean[(]|std[(]",features[1:561,2])
short_dataset<-select(mydataset,1)
short_listt<-grep("mean[(]|std[(]",features[1:561,2])
short_list<-grep("mean[(]|std[(]",features[1:561,2])
short_list
short_list<-short_list+2
short_list
short_dataset<-mydataset[,c(1,2,short_list)]
head(short_list)
head(short_dataset)
dim(short_dataset)
activity_labels
activity_labels[1]
activity_labels[2,1]
activity_labels[1,2]
mutate(short_dataset, label_activity = activity_labels[label,2])
mutate(short_dataset, label = activity_labels[label,2])
short_dataset2<-mutate(short_dataset, label = activity_labels[label,2])
head(short_dataset2)
?groub_by()
?group_by
group_by(short_dataset2,subject)
group_by(short_dataset2,subject,label)
tiny<-group_by(short_dataset2,subject,label)
dim(tiny)
?summarize_each
?summarize
??summarize_each
group_by(short_dataset2,subject,label) %>% summarise_each(funs(mean))
tiny<-group_by(short_dataset2,subject,label) %>% summarise_each(funs(mean))
dim(tiny)
?write.table
resultfile <-tempfile(tmpdir=td, fileext=".txt")
write.table(tiny,resultfile,row.name=FALSE)
td
resultfile <-tempfile(tmpdir=td, fileext="tidyDataSet.txt")
write.table(tiny,resultfile,row.name=FALSE)
?tempfile
?file
td
?tempfile
resultfile <-tempfile(pattern = "tiny",tmpdir=td, fileext=".txt")
write.table(tiny,resultfile,row.name=FALSE)
# create a temporary directory
td <- "c:\\temp\\exdata-008"
# set working directory to the temporary directory
setwd(td)
td <- "c:\\temp\\exdata-008"
setwd(td)
getwd()
td <- "c://temp//exdata-008"
setwd(td)
library(swirl)
swirl()
install_from_swirl(R_Programming )
install_from_swirl('R_Programming')
swirl()
5+7
x<-5+7
z
x
x-3
x-3
y<-x-3
y
c(1.1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
z
c(z,555,z)
z* 2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-my_sqrt/z
my_div<-z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10,100)
c(1, 2, 3, 4) + c(0, 10,1000)
c(1, 2, 3, 4) + c(0, 10,1000)
c(1, 2, 3, 4) + c(0, 10,1000)
z* 2+1000
my_div
x
skip
skip
skip()
skip()
skip()
skip()
quit()
library(datasets); data(mtcars)
round(t.test(mtcars$mpg)$conf.int)
round(qt(.975, df = 8) * 1 / 3, 2)
t.test(mtcars$mpg)$conf.int
mtcars$mpg
t.test(1:10)$conf.int
?rnorm
rnorm(9,mean=1100,sd=30)
t.test(rnorm(9,mean=1100,sd=30))
t.test(rnorm(9,mean=1100,sd=30))$$conf.int
t.test(rnorm(9,mean=1100,sd=30))$$conf.int
t.test(rnorm(9,mean=1100,sd=30))$conf.int
t.test(runif(9,mean=1100,sd=30))$conf.int
round(t.test(rnorm(9,mean=1100,sd=30))$conf.int)
round(t.test(rnorm(9,mean=1100,sd=30/9))$conf.int)
round(t.test(rnorm(9,mean=1100,sd=30/3))$conf.int)
?mean
?dgamma
?lm
?colSums
?mean
?colSums
?ggplot
??ggplot
??mean
?getMethod
?getS3method()
?getS4method()
?getS2method()
?getS4method()
?getS3method()
?showMethods()
data(Cars)
data(Car)
data()
getOption("defaultPackages")
install.packeages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training)
dim(testing)
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training)
dim(testing)
adData = data.frame(diagnosis,predictors)
str(adData)
adData = data.frame(predictors)
str(adData)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
str(training)
qplot(CompressiveStrength,data=training)
install.packages("Hmisc")
?cut2()
library("Hmisc")
?cut2()
qplot(cut2(CompressiveStrength),data=training)
str(training)
View(training)
View(training)
qplot(row.names,CompressiveStrength,data=training)
qplot(row.names,CompressiveStrength,data=training)
qplot(CompressiveStrength,data=training)
featurePlot(x = training[,c('Cement',
'BlastFurnaceSlag',
'FlyAsh',
'Water',
'Superplasticizer',
'CoarseAggregate',
'FineAggregate', 'Age')],
y = training$CompressiveStrength )
# question 3
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength,
p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(Superplasticizer, data=training)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subset = training[,grep("^IL", names(training))]
preProcess(subset, thresh = 0.8, method = "pca")$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
subset = training[,grep("^IL", names(training))]
preProcess(subset, thresh = 0.9, method = "pca")$numComp
trainSubset = training[,grep("^IL", names(training))]
testSubset = testing[,grep("^IL", names(testing))]
pp = preProcess(trainSubset, thresh = 0.8, method = "pca")
trainTransformed <- predict(pp, trainSubset)
testTransformed <- predict(pp, testSubset)
trainSubset$diagnosis = training$diagnosis
testSubset$diagnosis = testing$diagnosis
trainTransformed$diagnosis = training$diagnosis
testTransformed$diagnosis = testing$diagnosis
glmpca = train(diagnosis ~ ., data = trainTransformed, method = "glm")
glm = train(diagnosis ~ ., data = trainSubset, method = "glm")
round(confusionMatrix(testSubset$diagnosis,predict(glm, testSubset))$overall["Accuracy"],2)
round(confusionMatrix(testTransformed$diagnosis,predict(glmpca, testTransformed))$overall["Accuracy"],2)
install.packages("e1071")
trainSubset = training[,grep("^IL", names(training))]
testSubset = testing[,grep("^IL", names(testing))]
pp = preProcess(trainSubset, thresh = 0.8, method = "pca")
trainTransformed <- predict(pp, trainSubset)
testTransformed <- predict(pp, testSubset)
trainSubset$diagnosis = training$diagnosis
testSubset$diagnosis = testing$diagnosis
trainTransformed$diagnosis = training$diagnosis
testTransformed$diagnosis = testing$diagnosis
glmpca = train(diagnosis ~ ., data = trainTransformed, method = "glm")
glm = train(diagnosis ~ ., data = trainSubset, method = "glm")
round(confusionMatrix(testSubset$diagnosis,predict(glm, testSubset))$overall["Accuracy"],2)
round(confusionMatrix(testTransformed$diagnosis,predict(glmpca, testTransformed))$overall["Accuracy"],2)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
dim(training)
dim(testing)
install.packages("shiny")
library(shiny)
shinyUI(pageWithSidebar(headerPanel("Data Science FTW!"),))
shinyUI(pageWithSidebar(headerPanel("Data Science FTW!"),
sidebarPanel(h3('Sidebar text')),
mainPanel(h3('main text'))
))
shinyServer(
function(input,output){})
runapp()
runApp()
setwd("C:\IDA\C9-DevelopDataProduct\shiny1")
setwd("C:\\IDA\\C9-DevelopDataProduct\\shiny1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("devtools")
library(devtools)
install_github('slidify','ramnathv')
install_github('slidify','ramnathv/slidify')
install_github('slidify')
?install_github
install_github(ramnathv/slidify')
""
)
)
)
)
;
;
''
install_github('ramnathv/slidify')
install_github('ramnathv/slidify','slidify')
install_github("slidify", "ramnathv")
install_github("ramnathv/slidify")
install_github("slidify", "ramnathv/slidify")
install_github("ramnathv/slidify")
proxy = http://proxy:8080
?proxy
set HTTP_PROXY_HOST=proxy.sin.sap.corp
set HTTP_PROXY_PORT=8080
set HTTPS_PROXY_HOST=proxy.sin.sap.corp
set HTTPS_PROXY_PORT=8080
library(httr)
?set_config
reset_config()
install_github("ramnathv/slidify")
install_github("ramnathv/slidify")
install_github("ramnathv/slidify")
setwd("C:/Coursera/Developing Data Products")
runApp()
library(shiny)
runApp()
detach("package:shiny", unload=TRUE)
library("shiny", lib.loc="~/R/win-library/3.1")
install.packages("shiny")
runApp()
setwd("C:/Coursera/Developing Data Products")
runApp()
library(shiny)
setwd("C:/Coursera/Developing Data Products")
library(shiny)
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
